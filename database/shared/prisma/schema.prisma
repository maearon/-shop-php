generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// E-commerce Core Models
model User {
  id                          String         @id @default(cuid())
  name                        String?        @db.VarChar
  username                    String         @unique
  displayName                 String
  email                       String?        @unique
  refresh_token               String?        @unique
  refresh_token_expiration_at DateTime?      @db.Timestamp(6)
  created_at                  DateTime       @default(now()) @db.Timestamp(6)
  updated_at                  DateTime       @updatedAt @db.Timestamp(6)
  password_digest             String?        @db.VarChar
  passwordHash                String?
  googleId                    String?        @unique
  avatarUrl                   String?
  bio                         String?
  remember_digest             String?        @db.VarChar
  admin                       Boolean?       @default(false)
  activation_digest           String?        @db.VarChar
  activated                   Boolean?       @default(false)
  activated_at                DateTime?      @db.Timestamp(6)
  reset_digest                String?        @db.VarChar
  reset_sent_at               DateTime?      @db.Timestamp(6)

  // E-commerce Relations
  carts                       Cart[]
  orders                      Order[]
  reviews                     Review[]
  wishes                      Wishlist[]

  // Social Relations
  games                       Game[]
  accounts                    Account[]
  sessions                    Session[]
  microposts                  Micropost[]
  posts                       Post[]
  following                   Follow[]       @relation("Following")
  followers                   Follow[]       @relation("Followers")
  likes                       Like[]
  bookmarks                   Bookmark[]
  comments                    Comment[]
  receivedNotifications       Notification[] @relation("Recipient")
  issuedNotifications         Notification[] @relation("Issuer")

  @@map("users")
}

// E-commerce Models
model Product {
  id               String             @id @default(cuid())
  name             String?            @db.VarChar
  jan_code         String?            @db.VarChar
  gender           String?            @db.VarChar
  franchise        String?            @db.VarChar
  producttype      String?            @db.VarChar
  brand            String?            @db.VarChar
  category         String?            @db.VarChar
  sport            String?            @db.VarChar
  description_h5   String?
  description_p    String?
  specifications   String?
  care             String?
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @updatedAt @db.Timestamp(6)

  variants         Variant[]
  cart_items       CartItem[]
  guest_cart_items GuestCartItem[]
  order_items      OrderItem[]
  reviews          Review[]
  wish_items       WishItem[]
  guest_wish_items GuestWishItem[]

  @@map("products")
}

model Variant {
  id               String             @id @default(cuid())
  color            String?            @db.VarChar
  size             String?            @db.VarChar
  price            Float?
  originalprice    Float?
  sku              String?
  stock            Int?
  product_id       String
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @updatedAt @db.Timestamp(6)

  product          Product            @relation(fields: [product_id], references: [id], onDelete: Cascade)
  cart_items       CartItem[]
  guest_cart_items GuestCartItem[]
  order_items      OrderItem[]
  wish_items       WishItem[]
  guest_wish_items GuestWishItem[]

  @@index([product_id])
  @@map("variants")
}

model Cart {
  id         String     @id @default(cuid())
  user_id    String
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @updatedAt @db.Timestamp(6)

  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart_items CartItem[]

  @@index([user_id])
  @@map("carts")
}

model CartItem {
  id         String   @id @default(cuid())
  quantity   Int?
  cart_id    String
  product_id String
  variant_id String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  cart       Cart     @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant    Variant  @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@index([cart_id])
  @@index([product_id])
  @@index([variant_id])
  @@map("cart_items")
}

model Order {
  id          String      @id @default(cuid())
  user_id     String
  total_amount Float?
  status      String      @default("pending")
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @updatedAt @db.Timestamp(6)

  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]
  payments    Payment[]

  @@index([user_id])
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int?
  price      Float?
  order_id   String
  product_id String
  variant_id String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant    Variant  @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@index([product_id])
  @@index([variant_id])
  @@map("order_items")
}

model Payment {
  id                      String   @id @default(cuid())
  order_id                String
  stripe_payment_intent_id String?
  amount                  Float
  currency                String   @default("VND")
  status                  String   @default("pending")
  created_at              DateTime @default(now()) @db.Timestamp(6)
  updated_at              DateTime @updatedAt @db.Timestamp(6)

  order                   Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@map("payments")
}

model Review {
  id         String   @id @default(cuid())
  content    String?
  rating     Int?     @default(5)
  product_id String
  user_id    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@index([user_id])
  @@map("reviews")
}

model Wishlist {
  id         String     @id @default(cuid())
  user_id    String
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @updatedAt @db.Timestamp(6)

  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  wish_items WishItem[]

  @@index([user_id])
  @@map("wishes")
}

model WishItem {
  id         String   @id @default(cuid())
  wish_id    String
  product_id String
  variant_id String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  wishlist   Wishlist @relation(fields: [wish_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant    Variant  @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@index([wish_id])
  @@index([product_id])
  @@index([variant_id])
  @@map("wish_items")
}

// Guest Shopping Models
model GuestCart {
  id               String          @id @default(cuid())
  session_id       String          @unique
  created_at       DateTime        @default(now()) @db.Timestamp(6)
  updated_at       DateTime        @updatedAt @db.Timestamp(6)

  guest_cart_items GuestCartItem[]

  @@map("guest_carts")
}

model GuestCartItem {
  id            String    @id @default(cuid())
  quantity      Int?
  guest_cart_id String
  product_id    String
  variant_id    String
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @updatedAt @db.Timestamp(6)

  guest_cart    GuestCart @relation(fields: [guest_cart_id], references: [id], onDelete: Cascade)
  product       Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant       Variant   @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@index([guest_cart_id])
  @@index([product_id])
  @@index([variant_id])
  @@map("guest_cart_items")
}

model GuestWishlist {
  id               String           @id @default(cuid())
  session_id       String           @unique
  created_at       DateTime         @default(now()) @db.Timestamp(6)
  updated_at       DateTime         @updatedAt @db.Timestamp(6)

  guest_wish_items GuestWishItem[]

  @@map("guest_wishes")
}

model GuestWishItem {
  id            String        @id @default(cuid())
  guest_wish_id String
  product_id    String
  variant_id    String
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @updatedAt @db.Timestamp(6)

  guest_wishlist GuestWishlist @relation(fields: [guest_wish_id], references: [id], onDelete: Cascade)
  product        Product       @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant        Variant       @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@index([guest_wish_id])
  @@index([product_id])
  @@index([variant_id])
  @@map("guest_wish_items")
}

// Auth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  payload   Json?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Gaming Models
enum GameType {
  mcq
  open_ended
}

model Game {
  id          String     @id @default(cuid())
  userId      String
  questions   Question[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("games")
}

model Question {
  id                String   @id @default(cuid())
  question          String
  answer            String
  gameId            String
  options           Json?
  percentageCorrect Float?
  isCorrect         Boolean?
  questionType      GameType
  userAnswer        String?

  game              Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@map("questions")
}

model TopicCount {
  id    String @id @default(cuid())
  topic String @unique
  count Int

  @@map("topic_count")
}

// Social Media Models
model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  linkedNotifications Notification[]

  createdAt           DateTime       @default(now())

  @@map("posts")
}

model Media {
  id         String    @id @default(cuid())
  postId     String?
  post       Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  media_type MediaType
  url        String

  createdAt  DateTime  @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt   DateTime         @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

model Micropost {
  id         String   @id @default(cuid())
  content    String?
  user_id    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([user_id, created_at])
  @@map("microposts")
}

// Chat Models
model Room {
  id         String    @id @default(cuid())
  name       String?   @db.VarChar
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt @db.Timestamp(6)

  messages   Message[]

  @@map("rooms")
}

model Message {
  id         String   @id @default(cuid())
  room_id    String
  content    String?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  room       Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)

  @@index([room_id])
  @@map("messages")
}

// Project Management Models
model Project {
  id          String   @id @default(cuid())
  name        String?  @db.VarChar
  description String?  @db.VarChar
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt @db.Timestamp(6)

  tasks       Task[]

  @@map("projects")
}

model Task {
  id          String    @id @default(cuid())
  description String?   @db.VarChar
  done        Boolean?
  project_id  String?
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @updatedAt @db.Timestamp(6)

  project     Project?  @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id])
  @@map("tasks")
}

// Legacy Relationships Model
model Relationship {
  id          String   @id @default(cuid())
  follower_id String?
  followed_id String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt @db.Timestamp(6)

  @@unique([follower_id, followed_id])
  @@index([followed_id])
  @@index([follower_id])
  @@map("relationships")
}
