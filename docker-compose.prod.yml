version: '3.8'

services:
  # Frontend
  web:
    build:
      context: .
      dockerfile: docker/web.Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=${API_URL}
      - NEXT_PUBLIC_AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - NEXT_PUBLIC_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
    networks:
      - adidas-network

  # API Gateway
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=${DATABASE_URL}
      - Auth0__Domain=${AUTH0_DOMAIN}
      - Auth0__ClientId=${AUTH0_CLIENT_ID}
      - Auth0__ClientSecret=${AUTH0_CLIENT_SECRET}
      - Redis__ConnectionString=${REDIS_URL}
      - RabbitMQ__ConnectionString=${RABBITMQ_URL}
    networks:
      - adidas-network

  # Users Service
  users:
    build:
      context: .
      dockerfile: docker/users.Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - REDIS_URL=${REDIS_URL}
    networks:
      - adidas-network

  # Orders Service
  orders:
    build:
      context: .
      dockerfile: docker/orders.Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
    networks:
      - adidas-network

  # Payments Service
  payments:
    build:
      context: .
      dockerfile: docker/payments.Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - adidas-network

  # Search Service
  search:
    build:
      context: .
      dockerfile: docker/search.Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - REDIS_URL=${REDIS_URL}
    networks:
      - adidas-network

  # Legacy PHP Service
  legacy:
    build:
      context: .
      dockerfile: docker/legacy.Dockerfile
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - adidas-network

networks:
  adidas-network:
    driver: bridge
