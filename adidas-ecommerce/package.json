{
  "name": "adidas-ecommerce-platform",
  "version": "1.0.0",
  "description": "Adidas E-commerce Microservices Platform",
  "private": true,
  "workspaces": ["frontend/*", "services/product-service", "shared"],
  "scripts": {
    "preinstall": "node scripts/setup-env.js",
    "postinstall": "npm run setup:env",

    "setup:env": "node scripts/setup-env.js",
    "setup:dev": "npm run setup:env && npm run setup:network && npm run setup:volumes",
    "setup:network": "docker network create adidas-network 2>/dev/null || echo 'Network exists'",
    "setup:volumes": "docker volume create postgres_data && docker volume create redis_data && docker volume create rabbitmq_data && docker volume create elasticsearch_data",

    "dev": "cross-env NODE_ENV=development docker compose -f docker-compose.yml -f docker-compose.dev.yml up --build",
    "dev:detach": "cross-env NODE_ENV=development docker compose -f docker-compose.yml -f docker-compose.dev.yml up --build -d",
    "dev:rebuild": "npm run down && npm run dev",

    "up": "cross-env NODE_ENV=production docker compose up --build -d",
    "up:prod": "cross-env NODE_ENV=production docker compose -f docker-compose.yml -f docker-compose.prod.yml up --build -d",

    "down": "docker compose down",
    "down:volumes": "docker compose down -v --remove-orphans",

    "status": "docker compose ps",
    "health": "node scripts/health-check.js",

    "logs": "docker compose logs -f",
    "logs:frontstore": "docker compose logs -f frontstore",
    "logs:admin": "docker compose logs -f admindashboard",
    "logs:gateway": "docker compose logs -f gateway",
    "logs:auth": "docker compose logs -f auth-service",
    "logs:order": "docker compose logs -f order-service",
    "logs:product": "docker compose logs -f product-service",
    "logs:cart": "docker compose logs -f cart-service",
    "logs:payment": "docker compose logs -f payment-service",
    "logs:image": "docker compose logs -f image-service",

    "restart": "npm run down && npm run up",
    "restart:service": "node scripts/restart-service.js",
    "rebuild:service": "node scripts/rebuild-service.js",

    "migrate": "npm run migrate:auth && npm run migrate:order && npm run migrate:image && npm run migrate:product",
    "migrate:auth": "docker compose exec auth-service ./mvnw flyway:migrate",
    "migrate:order": "docker compose exec order-service dotnet ef database update",
    "migrate:image": "docker compose exec image-service bundle exec rails db:migrate",
    "migrate:product": "docker compose exec product-service npm run migrate",

    "seed": "npm run seed:auth && npm run seed:product && npm run seed:image",
    "seed:auth": "docker compose exec auth-service ./mvnw spring-boot:run -Dspring-boot.run.arguments=--seed",
    "seed:product": "docker compose exec product-service npm run seed",
    "seed:image": "docker compose exec image-service bundle exec rails db:seed",

    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "npm run test:auth && npm run test:order && npm run test:product && npm run test:cart && npm run test:payment",
    "test:integration": "npm run test:e2e",
    "test:auth": "docker compose exec auth-service ./mvnw test",
    "test:order": "docker compose exec order-service dotnet test",
    "test:product": "docker compose exec product-service npm test",
    "test:cart": "docker compose exec cart-service go test ./...",
    "test:payment": "docker compose exec payment-service python -m pytest",
    "test:image": "docker compose exec image-service bundle exec rspec",
    "test:e2e": "docker compose exec frontstore npm run test:e2e",

    "build": "npm run build:frontend && npm run build:services",
    "build:frontend": "npm run build:frontstore && npm run build:admin",
    "build:frontstore": "docker compose build frontstore",
    "build:admin": "docker compose build admindashboard",
    "build:services": "docker compose build auth-service order-service product-service cart-service payment-service image-service",

    "clean": "npm run down:volumes && docker system prune -f",
    "clean:images": "docker rmi $(docker images -q) 2>/dev/null || echo 'No images to remove'",

    "deploy:staging": "node scripts/deploy.js staging",
    "deploy:production": "node scripts/deploy.js production",
    "rollback": "node scripts/rollback.js",

    "monitor": "docker compose -f docker-compose.yml -f docker-compose.monitoring.yml up -d",
    "monitor:down": "docker compose -f docker-compose.monitoring.yml down"
  },
  "devDependencies": {
    "cross-env": "^7.0.3",
    "concurrently": "^8.2.2",
    "dotenv": "^16.3.1"
  },
  "dependencies": {
    "axios": "^1.6.0",
    "chalk": "^5.3.0",
    "inquirer": "^9.2.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  }
}
