services:
  # Frontend
  web:
    build:
      context: .
      dockerfile: docker/web.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - NEXT_PUBLIC_AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - NEXT_PUBLIC_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
    depends_on:
      - api
    networks:
      - adidas-network

  # API Gateway
  # This service acts as the API gateway for the microservices architecture.
  # It handles incoming requests, routes them to the appropriate microservice,
  # and manages authentication and authorization.
  # The API Gateway is built using ASP.NET Core and serves as the entry point for the frontend application.
  # It communicates with various microservices such as Users, Orders, Payments, and Search.
  # The API Gateway also integrates with Redis for caching, RabbitMQ for message queuing,
  # and Auth0 for authentication.     

  # API java spring boot auth Service
  api-java:
    build:  
      context: .
      dockerfile: docker/api-java.Dockerfile
    ports:
      - "8080:8080"
    environment:  
      - SPRING_PROFILES_ACTIVE=dev
      - DATABASE_URL=${DATABASE_URL}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - SERVICES_USERS_BASE_URL=http://users:3001
      - SERVICES_ORDERS_BASE_URL=http://orders:3002
      - SERVICES_PAYMENTS_BASE_URL=http://payments:3003
      - SERVICES_SEARCH_BASE_URL=http://search:3004
    depends_on:
      - redis
      - rabbitmq
      - users
      - orders
      - payments
      - search
    networks:
      - adidas-network 

  # API ruby rails product Service
  api-ruby:
    build:  
      context: .
      dockerfile: docker/api-ruby.Dockerfile
    ports:
      - "8085:8085"
    environment:  
      - POSTGRES_URL=postgres://default:z9GYTlrXa8Qx@ep-bold-voice-a4yp8xc9-pooler.us-east-1.aws.neon.tech:5432/verceldb?sslmode=require
    depends_on:
      - redis
      - rabbitmq
      - users
      - orders
      - payments
      - search
    networks:
      - adidas-network   
  
  # API dotnet Core Service
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=${DATABASE_URL}
      - Auth0__Domain=${AUTH0_DOMAIN}
      - Auth0__ClientId=${AUTH0_CLIENT_ID}
      - Auth0__ClientSecret=${AUTH0_CLIENT_SECRET}
      - Redis__ConnectionString=${REDIS_URL}
      - RabbitMQ__ConnectionString=${RABBITMQ_URL}
      - Services__Users__BaseUrl=http://users:3001
      - Services__Orders__BaseUrl=http://orders:3002
      - Services__Payments__BaseUrl=http://payments:3003
      - Services__Search__BaseUrl=http://search:3004
    depends_on:
      - redis
      - rabbitmq
      - users
      - orders
      - payments
      - search
    networks:
      - adidas-network

  # Users Service
  users:
    build:
      context: .
      dockerfile: docker/users.Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - redis
    networks:
      - adidas-network

  # Orders Service
  orders:
    build:
      context: .
      dockerfile: docker/orders.Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - redis
      - rabbitmq
    networks:
      - adidas-network

  # Payments Service
  payments:
    build:
      context: .
      dockerfile: docker/payments.Dockerfile
    ports:
      - "3003:3003"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      - rabbitmq
    networks:
      - adidas-network

  # Search Service
  search:
    build:
      context: .
      dockerfile: docker/search.Dockerfile
    ports:
      - "3004:3004"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - redis
      - elasticsearch
    networks:
      - adidas-network

  # Legacy PHP Service
  legacy:
    build:
      context: .
      dockerfile: docker/legacy.Dockerfile
    ports:
      - "8081:80"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - adidas-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - adidas-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - adidas-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - adidas-network

volumes:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:

networks:
  adidas-network:
    driver: bridge
